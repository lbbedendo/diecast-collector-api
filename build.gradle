plugins {
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "application"
    id "net.ltgt.apt-idea" version "0.21"
    id 'nu.studer.jooq' version '3.0.3'
}



version "0.1"
group "diecast.collector.api"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

ext {
    micronautDataVersion = "1.0.2"
    micronautVersion = "1.3.4"
}

dependencies {
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    annotationProcessor "io.micronaut.data:micronaut-data-processor:$micronautDataVersion"
    annotationProcessor "io.micronaut:micronaut-security"
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-security-jwt"
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "javax.annotation:javax.annotation-api"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut.configuration:micronaut-security-oauth2"
    implementation "io.micronaut.data:micronaut-data-hibernate-jpa:$micronautDataVersion", {
        exclude group:'io.micronaut.configuration', module:'micronaut-hibernate-jpa'
    }
    compile "io.micronaut.configuration:micronaut-hibernate-jpa:1.2.1", {
        exclude group:'io.micronaut.configuration', module:'micronaut-hibernate-jpa-spring'
    }
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5:1.1.1"
    testImplementation "org.mockito:mockito-junit-jupiter:2.22.0"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.1.0"
    testImplementation "org.assertj:assertj-core:3.11.1"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.4.2"
    implementation "io.micronaut.configuration:micronaut-jdbc-hikari"
    implementation "io.micronaut.configuration:micronaut-hibernate-validator"
    implementation "io.micronaut.configuration:micronaut-flyway"
    runtime "org.postgresql:postgresql:42.2.1"
    jooqRuntime "org.postgresql:postgresql:42.2.1"
    implementation "io.micronaut.configuration:micronaut-jooq"
}

test.classpath += configurations.developmentOnly

mainClassName = "diecast.collector.api.Application"
// use JUnit 5 platform
test {
    useJUnitPlatform()
}

shadowJar {
    mergeServiceFiles()
}

jooq {
    version = '3.11.11'
    edition = 'OSS'
    diecastCollector(sourceSets.main) {
        jdbc {
            driver = 'org.postgresql.Driver'
            url = 'jdbc:postgresql://localhost:5432/diecast_collector_dev'
            user = 'diecast_collector'
            password = 'diecast_collector'
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                inputSchema = 'dc'
            }
            generate {
                relations = true
                deprecated = false
                records = true
                immutablePojos = true
                fluentSetters = true
            }
            target {
                packageName = 'diecast.collector.api'
            }
        }
    }
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}
